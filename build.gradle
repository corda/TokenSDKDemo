buildscript {
    ext {
        corda_release_group = 'net.corda'
        corda_release_version = '4.3'
    	corda_platform_version = '4'
        corda_gradle_plugins_version = '4.0.42'
        tokens_release_version = '1.1'
        tokens_release_group = 'com.r3.corda.lib.tokens'
        accounts_release_version = '1.0'
        accounts_release_group = 'com.r3.corda.lib.accounts'
        confidential_id_release_group = "com.r3.corda.lib.ci"
        confidential_id_release_version = "1.0"
        mavenVersion = '3.1.0'
        maven_resolver_version = "1.1.1"
        kotlin_version = '1.3.21'
        junit_version = '4.12'
        dokka_version = '0.9.17'
        spring_boot_version = '2.0.2.RELEASE'
        spring_boot_gradle_plugin_version = '2.1.1.RELEASE'
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-releases" }
    }

    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "net.corda.plugins:cordformation:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:quasar-utils:$corda_gradle_plugins_version"
        classpath "net.corda.plugins:cordapp:$corda_gradle_plugins_version"
        classpath "org.jetbrains.dokka:dokka-gradle-plugin:${dokka_version}"
        classpath "org.springframework.boot:spring-boot-gradle-plugin:$spring_boot_gradle_plugin_version"
    }
}

plugins {
    id "com.jfrog.artifactory" version "4.7.5"
}

allprojects {
    apply plugin: 'java'

    version "1.0-SNAPSHOT"
    group "com.r3.demo"

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib-dev' }
        maven { url 'http://ci-artifactory.corda.r3cev.com/artifactory/corda-lib' }
        maven { url 'https://ci-artifactory.corda.r3cev.com/artifactory/corda-releases' }
        maven { url 'https://jitpack.io' }
    }

    configurations {
        compile {
            // We want to use SLF4J's version of these bindings: jcl-over-slf4j
            // Remove any transitive dependency on Apache's version.
            exclude group: 'commons-logging', module: 'commons-logging'
        }
    }

    configurations.all {
        resolutionStrategy {
            // Force dependencies to use the same version of Kotlin
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre8:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-stdlib-jre7:$kotlin_version"
            force "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
        }
    }

    tasks.withType(JavaCompile) {
        options.compilerArgs << "-parameters" // Required for shell commands.
    }

    jar {
        // CorDapps do not configure a Node's logging.
        exclude '**/log4j2*.xml'
    }
}

apply plugin: 'net.corda.plugins.cordapp'
apply plugin: 'net.corda.plugins.cordformation'

cordapp {
    targetPlatformVersion corda_platform_version.toInteger()
    minimumPlatformVersion corda_platform_version.toInteger()

    info {
        name "Corda Options"
        vendor "Corda Open Source"
    }

    signing {
        enabled false
    }
}

subprojects {
    buildscript {
        repositories {
            jcenter()
            mavenLocal()
            mavenCentral()
        }
    }

    repositories {
        jcenter()
        mavenLocal()
        mavenCentral()
        maven { url 'https://jitpack.io' }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-dev" }
        maven { url "http://ci-artifactory.corda.r3cev.com/artifactory/corda-releases" }
        maven { url "https://repo.gradle.org/gradle/libs-releases-local" }
    }
}

dependencies {
    // CorDapp dependencies.

    cordapp "$tokens_release_group:tokens-contracts:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-workflows:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-selection:$tokens_release_version"
    cordapp "$tokens_release_group:tokens-money:$tokens_release_version"
    cordapp "$confidential_id_release_group:ci-workflows:$confidential_id_release_version"
    cordapp "$accounts_release_group:accounts-contracts:$accounts_release_version"
    cordapp "$accounts_release_group:accounts-workflows:$accounts_release_version"

    // Needed by deployNodes task.
    cordaRuntime "$corda_release_group:corda:$corda_release_version"
    cordaRuntime "$corda_release_group:corda-node-api:$corda_release_version"
}

wrapper {
    gradleVersion = "4.10.2"
    distributionType = Wrapper.DistributionType.ALL
}

def rpcUsersList = [
        ['username' : "user1",
         'password' : "password",
         'permissions' : ["ALL"]]
]
def publishProjects = [
        project(":diamond-contracts"),
        project(":diamond-flows"),
        project(":diamond-nodes")
]

configure(publishProjects) { subproject ->
    apply plugin: 'maven-publish'
    apply plugin: 'com.jfrog.artifactory'

    task sourceJar(type: Jar, dependsOn: subproject.classes) {
        classifier = 'sources'
        from sourceSets.main.allSource
    }

    task javadocJar(type: Jar, dependsOn: subproject.javadoc) {
        classifier = 'javadoc'
        from javadoc.destinationDir
    }

    task install(dependsOn: 'publishToMavenLocal')

    publishing {
        publications {
            create(subproject.name, MavenPublication) {
                from components.java

                groupId subproject.group
                artifactId subproject.jar.baseName
                artifact tasks.sourceJar
                artifact tasks.javadocJar

                pom {
                    description = subproject.description
                }
            }
        }
    }
}

task deployNodes(type: net.corda.plugins.Cordform, dependsOn: ['jar']) {
    directory "./build/nodes"

    nodeDefaults {
        cordapps = [
            "$tokens_release_group:tokens-contracts:$tokens_release_version",
            "$tokens_release_group:tokens-workflows:$tokens_release_version",
            "$tokens_release_group:tokens-selection:$tokens_release_version",
            "$tokens_release_group:tokens-money:$tokens_release_version",
            "$confidential_id_release_group:ci-workflows:$confidential_id_release_version",
            "$accounts_release_group:accounts-contracts:$accounts_release_version",
            "$accounts_release_group:accounts-workflows:$accounts_release_version"
        ]
    }

    node {
        name "O=Notary,L=London,C=GB"
        notary = [validating: false]
        p2pPort 10002
        //h2Port 50000
        rpcSettings {
            address("localhost:10001")
            adminAddress("localhost:10003")
        }
        projectCordapp {
            deploy = true
        }
        cordapps.clear()
    }
    node {
        name "OU=Certifier,O=GIC,L=Canberra,C=AU"
        p2pPort 10005
        //webPort 11005
        h2Port 50001
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10004"
            adminAddress "0.0.0.0:10006"
        }
        rpcUsers = rpcUsersList
    }
    node {
        name "OU=Dealer,O=AAA,L=Sydney,C=AU"
        p2pPort 10014
        //webPort 11014
        h2Port 50014
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10016"
            adminAddress "0.0.0.0:10018"
        }
        rpcUsers = rpcUsersList
    }
    node {
        name "OU=Dealer,O=BBB,L=Sydney,C=AU"
        p2pPort 10017
        //webPort 11017
        h2Port 50017
        rpcSettings {
            useSsl false
            standAloneBroker false
            address "0.0.0.0:10013"
            adminAddress "0.0.0.0:10015"
        }
        rpcUsers = rpcUsersList
    }
    node {
        name "O=Bank,L=London,C=GB"
        p2pPort 10020
        //h2Port 50007
        rpcSettings {
            useSsl false
            standAloneBroker false
            address("localhost:10019")
            adminAddress("localhost:10021")
        }
        rpcUsers = rpcUsersList
    }
}

